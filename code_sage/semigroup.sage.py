
# This file was *autogenerated* from the file semigroup.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_10 = Integer(10)
class semi_group:
    def __init__(self, c, g, m, G):
        self.c = c # conductor (max du complementaire +1)
        self.g = g # genus (cardinal complementaire)
        self.m = m # multiplicity (min S\{0})
        self.d = [_sage_const_0 ] * (G*_sage_const_3 )
    def __str__(self):
        return "conducteur : {}, genus : {}, multiplicity : {}, ensemble complementaire {}".format(self.c, self.g, self.m, self.d)

def root(G):
    """ Racine de l'arbe Tg (les semi-groups avec genus inferieur ou egal a G"""
    R = semi_group(_sage_const_1 , _sage_const_0 , _sage_const_1 , G) #(0, 0, 1, G)
    for x in range(_sage_const_3  * G):
        R.d[x] = _sage_const_1  + (x/_sage_const_2 )
    return [R]

def son(S, x, G):
    """ fonction successeur """
    if x > S.m:
        m = S.m
    else:
        m = S.m + _sage_const_1 
    Sx = semi_group(x + _sage_const_1 , S.g + _sage_const_1 , m, G)
    Sx.d = S.d

    for y in range(x, _sage_const_3 *G):
        if S.d[y - x] > _sage_const_0 :
            Sx.d[y] = S.d[y] - _sage_const_1 
    return Sx

seeds = root(_sage_const_4 )
#succ = lambda m: []
def succ(m):
    r = []
    for x in range(_sage_const_3 *_sage_const_4 ):
        r.append(son(m, x, _sage_const_4 ))
    return r


Tg = RecursivelyEnumeratedSet(seeds, succ, structure='forest')
print(Tg)
it = Tg.depth_first_search_iterator()
for i in range(_sage_const_10 ):
    print(next(it))



"""
# A -> N (le semigroupe numerique le plus evident)
seeds = [0]
succ = lambda m: [m+1]
A = RecursivelyEnumeratedSet(seeds, succ, structure='forest')

# B -> tqt meme pas
seeds = [0, 1]
succ = lambda m: [m+2]
B = RecursivelyEnumeratedSet(seeds, succ, structure='forest')

#it = A.depth_first_search_iterator()
#for i in range(10):
#    print(next(it))

itb = B.braidth_first_search_iterator()
for i in range(10):
    print(next(itb))
"""

